#!/usr/bin/env node

/*
 * Expediente CLI
 */

var moment = require('moment');
var chalk = require('chalk');
var program = require('commander');
var pkg = require('../package.json');
var lib = require('../lib');
var defaults = require('../conf');
var expediente = require('../');
var options = ['hours', 'tolerance', 'early'];
var logger = console.log;
var defaultFormat = 'HH:mm';
var now = moment();
var config = {};
var userConfig;

function mapResult (obj, cb) {
  var result = {};

  Object.keys(obj).forEach(function (key, i, keys) {
    result[key] = cb(key, i, keys);
  });

  return result;
}

function logDetailed (result) {
  result = mapResult(result, function (key) {
    return moment(result[key], defaultFormat);
  });

  var almost = result.finish.diff(now, 'minutes') <= 30;
  var goodToGo = now.isAfter(result.minimum);
  var onLimit = now.isAfter(result.finish) && now.isBefore(result.limit);

  result = mapResult(result, function (key) {
    return result[key].format(defaultFormat);
  });

  console.log('Start    ', result.start);
  console.log('Remaining', almost ? chalk.blue(result.remaining) : result.remaining);
  console.log('Minimum  ', goodToGo ? chalk.green(result.minimum) : result.minimum);
  console.log('Finish   ', onLimit ? chalk.red(result.finish) : result.finish);

  if (result.limit) {
    console.log('Limit    ', onLimit ? chalk.yellow(result.limit) : result.limit);
  }
}

// Arguments
program
  .version(pkg.version)
  .usage('<HH:mm> [options]')
  .option('-h, --hours <HH:mm>', 'hours [HH:mm]')
  .option('-t, --tolerance <HH:mm>', 'tolerance [HH:mm]')
  .option('-c, --config <file>', 'choose config file')
  .option('-s, --simple', 'output finish time only')
  .option('-e, --early <HH:mm>', 'time to be subtracted from the duration');

// Help
program.on('--help', function () {
  logger('  Config:');
  logger('');
  logger('    If the file ~/.expedienteconfig.json exists, expediente will ');
  logger('    use it\'s contents as settings for default expedient duration');
  logger('    or tolerance time. Any parameter will override the file config');
  logger('');
  logger('    See https://github.com/guilhermehn/expediente/blob/master/README.md');
  logger('    for example config.');
  logger('');
});

program.parse(process.argv);

// Set config load
userConfig = lib.loadConfig(program.config || '~/.expedienteconfig.json');

if (userConfig) {
  Object
    .keys(defaults)
    .forEach(function (key) {
      config[key] = (userConfig.hasOwnProperty(key) ? userConfig : defaults)[key];
    });
}
else {
  config = defaults;
}

// Show help text if the default
// argument is not present
if (!program.args.length) {
  program.help();
}

config.start = program.args[0];

options.forEach(function (option) {
  if (program[option]) {
    config [option] = program[option];
  }
});

if (program.simple) {
  config.simple = program.simple;
}
else {
  logger = logDetailed;
}

var result = expediente(config);

if (result === null) {
  console.log('\n  Invalid argument');
  program.help();
}

logger(result);
