#!/usr/bin/env node

/*
 * Expediente CLI
 */

var moment = require('moment');
var chalk = require('chalk');
var program = require('commander');
var pkg = require('../package.json');
var lib = require('../lib');
var defaults = require('../conf');
var expediente = require('../');
var options = ['hours', 'tolerance', 'early', 'simple'];
var logger = console.log;
var defaultFormat = 'HH:mm';
var config = {};
var userConfig;

/**
 * Map a object by its keys
 * @param  {Object}   obj       The object which the keys will be mapped
 * @param  {Function} iterator  The iterator function to be exectuted for each key
 * @return {Object}
 */
function mapByKeys (obj, iterator) {
  var result = {};

  // For each key of the object run the iterator and store
  // the result to the `result` object inside the same key
  Object.keys(obj).forEach(function (key, i, keys) {
    result[key] = iterator(key, i, keys);
  });

  return result;
}

/**
 * Used to log each item from the result
 * of the expedient calculation
 * @param  {Object} result The expedient calculation result
 * @return undefined
 */
function logDetailed (result) {
  var now = moment();

  // Transform each result item to moment object
  result = mapByKeys(result, function (key) {
    return lib.format(moment(result[key], defaultFormat));
  });

  // Log the start time
  console.log('Start    ', result.start);

  // If there's a remaining time, log it
  if (result.remaining) {
    console.log('Remaining', result.remaining);
  }

  // If there's a minimum time, log it
  if (result.minimum) {
    console.log('Minimum  ', result.minimum);
  }

  // Log the finish time
  console.log('Finish   ', result.finish);

  // If there's a limit time, log it
  if (result.limit) {
    console.log('Limit    ', result.limit);
  }
}

// Arguments
program
  .version(pkg.version)
  .usage('<HH:mm> [options]')
  .option('-h, --hours <HH:mm>', 'hours [HH:mm]')
  .option('-t, --tolerance <HH:mm>', 'tolerance [HH:mm]')
  .option('-c, --config <file>', 'choose config file')
  .option('-s, --simple', 'output finish time only')
  .option('-e, --early <HH:mm>', 'time to be subtracted from the duration');

// Help
program.on('--help', function () {
  logger('  Config:');
  logger('');
  logger('    If the file ~/.expedienteconfig.json exists, expediente will ');
  logger('    use it\'s contents as settings for default expedient duration');
  logger('    or tolerance time. Any parameter will override the file config');
  logger('');
  logger('    See https://github.com/guilhermehn/expediente/blob/master/README.md');
  logger('    for example config.');
  logger('');
});

// Parse the cli arguments
program.parse(process.argv);

// Set config load
userConfig = lib.loadConfig(program.config || '~/.expedienteconfig.json');

// If the user has a config file
// use it to as the default config
if (userConfig) {
  Object
    .keys(defaults)
    .forEach(function (key) {
      var obj = userConfig.hasOwnProperty(key) ? userConfig : defaults;
      config[key] = obj[key];
    });
}
// Otherwise the package defaults will be used
else {
  config = defaults;
}

// Show help text if the default
// argument is not present
if (!program.args.length) {
  program.help();
}

// The start must be the first parameter
config.start = program.args[0];

// Extends the config object
// with the cli parameters
options.forEach(function (option) {
  if (program[option]) {
    config[option] = program[option];
  }
});

// If the --simple flag is not received
// switch the logger function to the
// detailed version
if (!program.simple) {
  logger = logDetailed;
}

// Calculate the expedient
var result = expediente(config);

// If the result is null something is
// wrong with the parameters.
// Inform the problem, show the help
// and exit with code 1
if (result === null) {
  console.log('\n  Invalid argument');
  program.help();
}

// Log the results of the
// expedient calculation
logger(result);
